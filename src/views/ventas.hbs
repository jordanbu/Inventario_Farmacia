<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestión de Ventas</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        .card {
            border: none;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }
        .btn-custom {
            background: linear-gradient(90deg, #4f46e5, #7c3aed);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 10px 20px;
        }
        .btn-custom:hover {
            background: linear-gradient(90deg, #4338ca, #6d28d9);
        }
        .btn-danger, .btn-success {
            border-radius: 8px;
            padding: 8px 16px;
        }
        .product-item-sale { /* Estilo específico para la lista de productos en ventas */
            border-bottom: 1px solid #e5e7eb;
            padding: 15px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .form-control {
            border-radius: 8px;
            border: 1px solid #d1d5db;
            padding: 10px;
        }
        .form-control:focus {
            border-color: #4f46e5;
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.2);
        }
        .card-header {
            background: linear-gradient(90deg, #4f46e5, #7c3aed);
            color: white;
            border-radius: 12px 12px 0 0;
            padding: 20px;
        }
        .cart-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px dashed #e5e7eb;
        }
        .cart-item:last-child {
            border-bottom: none;
        }
    </style>
</head>
<body class="bg-gray-100">
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-md-8 col-lg-6 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h1 class="h4 mb-0">Productos para Venta</h1>
                    </div>
                    <div class="card-body p-4">
                        <input type="text" id="search-product-input" class="form-control mb-3" placeholder="Buscar producto...">
                        <ul id="product-list-for-sale" class="list-unstyled">
                            <li class="text-center text-muted" id="loading-products-message">Cargando productos...</li>
                        </ul>
                    </div>
                </div>
            </div>

            <div class="col-md-8 col-lg-6">
                <div class="card">
                    <div class="card-header">
                        <h1 class="h4 mb-0">Carrito de Ventas</h1>
                    </div>
                    <div class="card-body p-4">
                        <ul id="cart-list" class="list-unstyled">
                            <li class="text-center text-muted" id="empty-cart-message">El carrito está vacío.</li>
                        </ul>
                        <hr class="my-3">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <strong>Total:</strong> <span id="cart-total">$0.00</span>
                        </div>
                        <button id="process-sale-btn" class="btn btn-custom w-100" disabled>Procesar Venta</button>
                        <button id="clear-cart-btn" class="btn btn-danger w-100 mt-2" disabled>Vaciar Carrito</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let availableProducts = []; // Para almacenar los productos obtenidos del backend
        let cart = []; // Array para almacenar los productos en el carrito

        const productListForSale = document.getElementById('product-list-for-sale');
        const searchProductInput = document.getElementById('search-product-input');
        const loadingProductsMessage = document.getElementById('loading-products-message');
        const cartList = document.getElementById('cart-list');
        const cartTotalSpan = document.getElementById('cart-total');
        const emptyCartMessage = document.getElementById('empty-cart-message');
        const processSaleBtn = document.getElementById('process-sale-btn');
        const clearCartBtn = document.getElementById('clear-cart-btn');

        // --- Funciones de renderizado y actualización ---

        async function fetchProducts() {
            try {
                const response = await fetch('/api/productos'); // Nueva ruta para obtener productos como JSON
                if (!response.ok) {
                    throw new Error('Error al cargar los productos.');
                }
                availableProducts = await response.json();
                loadingProductsMessage.style.display = 'none'; // Ocultar mensaje de carga
                displayProducts(availableProducts);
            } catch (error) {
                console.error('Error fetching products:', error);
                loadingProductsMessage.textContent = 'Error al cargar los productos.';
                loadingProductsMessage.style.color = 'red';
            }
        }

        function displayProducts(productsToDisplay) {
            productListForSale.innerHTML = ''; // Limpiar la lista actual
            if (productsToDisplay.length === 0) {
                productListForSale.innerHTML = '<li class="text-center text-muted">No se encontraron productos.</li>';
                return;
            }

            productsToDisplay.forEach(product => {
                const li = document.createElement('li');
                li.classList.add('product-item-sale');
                li.innerHTML = `
                    <div>
                        <h5 class="mb-1">${product.nombre}</h5>
                        <p class="mb-1 text-muted">Precio: $${product.precio}</p>
                        <p class="mb-0 text-muted">Stock: ${product.stock}</p>
                    </div>
                    <div>
                        <button class="btn btn-success btn-sm add-to-cart-btn"
                                data-product-id="${product.id}"
                                data-product-name="${product.nombre}"
                                data-product-price="${product.precio}"
                                data-product-stock="${product.stock}">
                            Añadir
                        </button>
                    </div>
                `;
                productListForSale.appendChild(li);
            });
        }

        function updateCartDisplay() {
            cartList.innerHTML = ''; // Limpiar la lista actual
            let total = 0;

            if (cart.length === 0) {
                emptyCartMessage.style.display = 'block';
                processSaleBtn.disabled = true;
                clearCartBtn.disabled = true;
            } else {
                emptyCartMessage.style.display = 'none';
                processSaleBtn.disabled = false;
                clearCartBtn.disabled = false;

                cart.forEach(item => {
                    const li = document.createElement('li');
                    li.classList.add('cart-item');
                    li.innerHTML = `
                        <div>
                            ${item.name} (x${item.quantity})
                        </div>
                        <div>
                            $${(item.price * item.quantity).toFixed(2)}
                            <button class="btn btn-danger btn-sm ms-2 remove-from-cart-btn" data-product-id="${item.productId}">X</button>
                        </div>
                    `;
                    cartList.appendChild(li);
                    total += item.price * item.quantity;
                });
            }
            cartTotalSpan.textContent = `$${total.toFixed(2)}`;
        }

        // --- Event Listeners ---

        // Buscar productos
        searchProductInput.addEventListener('input', () => {
            const searchTerm = searchProductInput.value.toLowerCase();
            const filteredProducts = availableProducts.filter(product =>
                product.nombre.toLowerCase().includes(searchTerm)
            );
            displayProducts(filteredProducts);
        });

        // Añadir al carrito
        productListForSale.addEventListener('click', (event) => {
            if (event.target.classList.contains('add-to-cart-btn')) {
                const button = event.target;
                const productId = button.dataset.productId;
                const productName = button.dataset.productName;
                const productPrice = parseFloat(button.dataset.productPrice);
                const productStock = parseInt(button.dataset.productStock, 10);

                const existingItemIndex = cart.findIndex(item => item.productId === productId);

                if (existingItemIndex > -1) {
                    // Si el producto ya está en el carrito, aumentar la cantidad
                    if (cart[existingItemIndex].quantity < productStock) {
                        cart[existingItemIndex].quantity++;
                        alert(`Se añadió una unidad más de "${productName}" al carrito.`);
                    } else {
                        alert(`No hay suficiente stock de "${productName}" para añadir más al carrito. Stock disponible: ${productStock}`);
                    }
                } else {
                    // Si el producto no está en el carrito, añadirlo
                    if (productStock > 0) {
                        cart.push({
                            productId: productId,
                            name: productName,
                            price: productPrice,
                            quantity: 1,
                            maxStock: productStock // Guardar el stock actual para referencia
                        });
                        alert(`"${productName}" añadido al carrito.`);
                    } else {
                        alert(`"${productName}" no tiene stock disponible.`);
                    }
                }
                updateCartDisplay();
            }
        });

        // Eliminar del carrito
        cartList.addEventListener('click', (event) => {
            if (event.target.classList.contains('remove-from-cart-btn')) {
                const productIdToRemove = event.target.dataset.productId;
                cart = cart.filter(item => item.productId !== productIdToRemove);
                updateCartDisplay();
            }
        });

        // Procesar Venta
        processSaleBtn.addEventListener('click', async () => {
            if (cart.length === 0) {
                alert('El carrito está vacío. Añade productos para procesar la venta.');
                return;
            }

            const confirmSale = confirm('¿Estás seguro de procesar esta venta?');
            if (!confirmSale) {
                return;
            }

            const itemsToSell = cart.map(item => ({
                productId: item.productId,
                quantity: item.quantity
            }));

            try {
                const response = await fetch('/new-sale', { // Llama a la ruta POST del backend
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ items: itemsToSell })
                });

                const result = await response.json();

                if (response.ok) {
                    alert(`Venta procesada exitosamente! ID: ${result.ventaId}, Total: $${result.total.toFixed(2)}`);
                    cart = []; // Vaciar el carrito
                    updateCartDisplay();
                    await fetchProducts(); // Volver a cargar los productos para reflejar el stock actualizado
                } else {
                    alert(`Error al procesar la venta: ${result.message || 'Error desconocido'}`);
                    console.error('Error details:', result.error);
                }
            } catch (error) {
                console.error('Error de red al procesar la venta:', error);
                alert('Hubo un problema de conexión al procesar la venta. Inténtalo de nuevo.');
            }
        });

        // Vaciar Carrito
        clearCartBtn.addEventListener('click', () => {
            if (confirm('¿Estás seguro de que quieres vaciar el carrito?')) {
                cart = [];
                updateCartDisplay();
                alert('Carrito vaciado.');
            }
        });

        // Cargar productos al iniciar la página
        document.addEventListener('DOMContentLoaded', fetchProducts);
    </script>
</body>
</html>